package com.example.demo.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.MDC;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * Utility for consistent, PII-safe, JSON-formatted logging with trace id and request context.
 */
@Slf4j
public final class LogUtil {

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
    private static final Set<String> PII_FIELDS;
    public static final String TRACE_ID_HEADER = "trace-id";
    public static final String TRACE_ID_MDC_KEY = "traceId";

    static {
        Set<String> pii = new HashSet<>(Arrays.asList("password", "ssn", "creditCard", "email", "phone", "dob"));
        PII_FIELDS = Collections.unmodifiableSet(pii);
    }

    private LogUtil() {}

    /**
     * Logs a message at the specified log level in JSON format, including trace id, masked path/query params, and URLs.
     * @param level Log level ("INFO", "WARN", "ERROR", "DEBUG", "TRACE")
     * @param message The log message
     */
    public static void log(String level, String message) {
        HttpServletRequest request = getCurrentRequest();
        Map<String, Object> logMap = new LinkedHashMap<>();
        logMap.put("timestamp", new Date());
        logMap.put("level", level == null ? null : level.toUpperCase());
        logMap.put("message", maskIfPii(message));
        logMap.put("traceId", getTraceId(request));
        logMap.put("controllerUrl", request == null ? null : request.getRequestURI());
        logMap.put("callingUrl", request == null ? null : request.getRequestURL().toString());
        logMap.put("pathParams", maskPIIPathParams(request));
        logMap.put("queryParams", maskPIIParams(request));

        String jsonLog = toJson(logMap);

        switch (level == null ? "" : level.toUpperCase()) {
            case "ERROR" -> log.error(jsonLog);
            case "WARN" -> log.warn(jsonLog);
            case "INFO" -> log.info(jsonLog);
            case "DEBUG" -> log.debug(jsonLog);
            case "TRACE" -> log.trace(jsonLog);
            default -> log.info(jsonLog);
        }
    }

    private static String getTraceId(HttpServletRequest request) {
        String traceId = MDC.get(TRACE_ID_MDC_KEY);
        if ((traceId == null || traceId.isEmpty()) && request != null) {
            traceId = request.getHeader(TRACE_ID_HEADER);
        }
        return traceId != null ? traceId : "";
    }

    private static String maskPIIParams(HttpServletRequest request) {
        if (request == null) return "{}";
        Map<String, Object> masked = new HashMap<>();
        request.getParameterMap().forEach((key, value) ->
            masked.put(key, PII_FIELDS.contains(key.toLowerCase()) ? "****MASKED****" : Arrays.toString(value))
        );
        return toJson(masked);
    }

    private static String maskPIIPathParams(HttpServletRequest request) {
        if (request == null) return "{}";
        Map<String, String> pathVars = (Map<String, String>)
                request.getAttribute(org.springframework.web.servlet.HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
        if (pathVars == null) pathVars = new HashMap<>();
        Map<String, String> masked = new HashMap<>();
        for (Map.Entry<String, String> entry : pathVars.entrySet()) {
            masked.put(entry.getKey(), PII_FIELDS.contains(entry.getKey().toLowerCase()) ? "****MASKED****" : entry.getValue());
        }
        return toJson(masked);
    }

    private static String maskIfPii(String value) {
        if (value == null) return null;
        for (String pii : PII_FIELDS) {
            if (value.toLowerCase().contains(pii)) return "****MASKED****";
        }
        return value;
    }

    private static String toJson(Object obj) {
        try {
            return OBJECT_MAPPER.writeValueAsString(obj);
        } catch (JsonProcessingException e) {
            return "{}";
        }
    }

    private static HttpServletRequest getCurrentRequest() {
        try {
            ServletRequestAttributes attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
            return attrs != null ? attrs.getRequest() : null;
        } catch (Exception e) {
            return null;
        }
    }
}
