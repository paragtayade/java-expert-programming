/**
 * Efficient Global Exception Handler for Spring Boot
 * Handles all 4xx, 5xx and generic exceptions, masks PII, logs error details, and returns consistent error structure.
 */

package com.example.demo.exception;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.*;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.*;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.servlet.NoHandlerFoundException;

import javax.servlet.http.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Efficient Global Exception Handler for Spring Boot
 * Handles all 4xx, 5xx and generic exceptions, masks PII, logs error details, and returns consistent error structure.
 */
@RestControllerAdvice
@Order(Ordered.HIGHEST_PRECEDENCE)
@Slf4j
public class GlobalExceptionHandler {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    // Fields considered as PII for masking
    private static final Set<String> PII_FIELDS = new HashSet<>(Arrays.asList(
            "password", "ssn", "creditCard", "email", "phone", "dob"
    ));

    // ------------ 4xx CUSTOM EXCEPTIONS -------------- //
    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<ErrorResponse> handleBadRequest(BadRequestException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(UnauthorizedException.class)
    public ResponseEntity<ErrorResponse> handleUnauthorized(UnauthorizedException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(ForbiddenException.class)
    public ResponseEntity<ErrorResponse> handleForbidden(ForbiddenException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.FORBIDDEN);
    }

    @ExceptionHandler(NotFoundException.class)
    public ResponseEntity<ErrorResponse> handleNotFound(NotFoundException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(MethodNotAllowedException.class)
    public ResponseEntity<ErrorResponse> handleMethodNotAllowed(MethodNotAllowedException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.METHOD_NOT_ALLOWED);
    }

    @ExceptionHandler(ConflictException.class)
    public ResponseEntity<ErrorResponse> handleConflict(ConflictException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(RequestTimeoutException.class)
    public ResponseEntity<ErrorResponse> handleRequestTimeout(RequestTimeoutException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.REQUEST_TIMEOUT);
    }

    // ------------ 5xx CUSTOM EXCEPTIONS -------------- //
    @ExceptionHandler(InternalServerErrorException.class)
    public ResponseEntity<ErrorResponse> handleInternalServerError(InternalServerErrorException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(NotImplementedException.class)
    public ResponseEntity<ErrorResponse> handleNotImplemented(NotImplementedException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.NOT_IMPLEMENTED);
    }

    @ExceptionHandler(BadGatewayException.class)
    public ResponseEntity<ErrorResponse> handleBadGateway(BadGatewayException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.BAD_GATEWAY);
    }

    @ExceptionHandler(ServiceUnavailableException.class)
    public ResponseEntity<ErrorResponse> handleServiceUnavailable(ServiceUnavailableException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.SERVICE_UNAVAILABLE);
    }

    @ExceptionHandler(GatewayTimeoutException.class)
    public ResponseEntity<ErrorResponse> handleGatewayTimeout(GatewayTimeoutException ex, HttpServletRequest request) {
        return buildErrorResponse(ex, request, HttpStatus.GATEWAY_TIMEOUT);
    }

    // ----------- SPRING / FRAMEWORK 4xx HANDLING ------------ //
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {
        HttpServletRequest request = ((ServletWebRequest) webRequest).getRequest();
        String message = ex.getBindingResult().getFieldErrors()
                .stream().map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(", "));
        return buildErrorResponse(new BadRequestException(message), request, HttpStatus.BAD_REQUEST);
    }

    @Override
    protected ResponseEntity<Object> handleMissingServletRequestParameter(
            MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {
        HttpServletRequest request = ((ServletWebRequest) webRequest).getRequest();
        return buildErrorResponse(new BadRequestException(ex.getMessage()), request, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ErrorResponse> handleTypeMismatch(MethodArgumentTypeMismatchException ex, HttpServletRequest request) {
        return buildErrorResponse(new BadRequestException("Parameter '" + ex.getName() + "' is invalid: " + ex.getMessage()), request, HttpStatus.BAD_REQUEST);
    }

    @Override
    protected ResponseEntity<Object> handleNoHandlerFoundException(
            NoHandlerFoundException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {
        HttpServletRequest request = ((ServletWebRequest) webRequest).getRequest();
        return buildErrorResponse(new NotFoundException("No handler found for " + ex.getHttpMethod() + " " + ex.getRequestURL()), request, HttpStatus.NOT_FOUND);
    }

    @Override
    protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(
            HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {
        HttpServletRequest request = ((ServletWebRequest) webRequest).getRequest();
        return buildErrorResponse(new MethodNotAllowedException(ex.getMessage()), request, HttpStatus.METHOD_NOT_ALLOWED);
    }

    @Override
    protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(
            HttpMediaTypeNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest webRequest) {
        HttpServletRequest request = ((ServletWebRequest) webRequest).getRequest();
        return buildErrorResponse(new BadRequestException(ex.getMessage()), request, HttpStatus.BAD_REQUEST);
    }

    // ----------- GENERIC CATCH-ALL HANDLER FOR 5xx & OTHERS ---------- //
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleAll(Exception ex, HttpServletRequest request) {
        log.error("Unhandled exception", ex);
        return buildErrorResponse(new InternalServerErrorException("An unexpected error occurred"), request, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // -------------- RESPONSE STRUCTURE & LOGGING ------------------- //
    private ResponseEntity<ErrorResponse> buildErrorResponse(Exception ex, HttpServletRequest request, HttpStatus status) {
        String maskedHeaders = maskPIIHeaders(getHeaders(request));
        String maskedQueryParams = maskPIIParams(request.getParameterMap());
        String maskedPathParams = maskPIIPathParams(request);

        ErrorResponse errorResponse = ErrorResponse.builder()
                .timestamp(LocalDateTime.now())
                .httpStatus(status.getReasonPhrase())
                .httpStatusCode(status.value())
                .message(maskIfPii(ex.getMessage()))
                .className(ex.getClass().getName())
                .requestUrl(request.getRequestURL().toString())
                .requestMethod(request.getMethod())
                .headers(maskedHeaders)
                .queryParams(maskedQueryParams)
                .pathParams(maskedPathParams)
                .responseMessage(maskIfPii(ex.toString()))
                .build();

        // Log error details
        log.error("Error handled: Status: {}, Path: {}, Method: {}, Message: {}, Headers: {}, Query: {}",
                status.value(), request.getRequestURI(), request.getMethod(), errorResponse.getMessage(),
                errorResponse.getHeaders(), errorResponse.getQueryParams(), ex);

        return new ResponseEntity<>(errorResponse, status);
    }

    private String getHeaders(HttpServletRequest request) {
        Map<String, String> headers = new HashMap<>();
        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames != null && headerNames.hasMoreElements()) {
            String key = headerNames.nextElement();
            headers.put(key, request.getHeader(key));
        }
        try {
            return objectMapper.writeValueAsString(headers);
        } catch (Exception e) {
            return "{}";
        }
    }

    private String maskPIIHeaders(String headersJson) {
        return maskPIIJsonString(headersJson);
    }

    private String maskPIIParams(Map<String, String[]> paramMap) {
        Map<String, Object> masked = new HashMap<>();
        for (Map.Entry<String, String[]> entry : paramMap.entrySet()) {
            String key = entry.getKey();
            Object value = PII_FIELDS.contains(key.toLowerCase()) ? "****MASKED****" : Arrays.toString(entry.getValue());
            masked.put(key, value);
        }
        try {
            return objectMapper.writeValueAsString(masked);
        } catch (Exception e) {
            return "{}";
        }
    }

    private String maskPIIPathParams(HttpServletRequest request) {
        Map<String, String> pathVars = (Map<String, String>)
                request.getAttribute(org.springframework.web.servlet.HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
        if (pathVars == null) pathVars = new HashMap<>();
        Map<String, String> masked = new HashMap<>();
        for (Map.Entry<String, String> entry : pathVars.entrySet()) {
            masked.put(entry.getKey(), PII_FIELDS.contains(entry.getKey().toLowerCase()) ? "****MASKED****" : entry.getValue());
        }
        try {
            return objectMapper.writeValueAsString(masked);
        } catch (Exception e) {
            return "{}";
        }
    }

    private String maskPIIJsonString(String json) {
        try {
            Map<String, Object> map = objectMapper.readValue(json, Map.class);
            for (String pii : PII_FIELDS) {
                if (map.containsKey(pii)) {
                    map.put(pii, "****MASKED****");
                }
            }
            return objectMapper.writeValueAsString(map);
        } catch (Exception e) {
            return json;
        }
    }

    private String maskIfPii(String value) {
        if (value == null) return null;
        for (String pii : PII_FIELDS) {
            if (value.toLowerCase().contains(pii)) return "****MASKED****";
        }
        return value;
    }

    // ----------- Consistent Error Response Class ------------ //
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class ErrorResponse {
        private LocalDateTime timestamp;
        private String httpStatus;
        private int httpStatusCode;
        private String message;
        private String requestUrl;
        private String headers;
        private String queryParams;
        private String pathParams;
        private String className;
        private String requestMethod;
        private String responseMessage;
    }
}
